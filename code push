First Create New APP and add code push by performing following commands:

react-native init RNMyApp   // CREATES NEW RN APP
cd RNMyApp
npm install react-native-code-push --save  //ADD CODE PUSH DEPENDENCY
npm install // INSTALL ALL DEPENEDENCY
react-native link  //LINK CODE PUSH LIBRARY

Note:- To integrate the Code Push Manual push changes, please refer attached App.js (we changed extension to .txt, plz rename if required at ur end) and make same changes in your App.js after generating the RN app.

When you link (in last command above) Code Push it will ask for deployment keys for Android and iOS, below are the Staging Deployment Keys generated under Microsoft Code Push App Center under APP-NAME > Distribute > Code Push. Enter the corresponding keys 
// For Android 
ACa8UK43ZcAxWJqy_nYdwGR8cXVASkQgz6ExE 
 
//For iOS 
oPGMBJ5LOh1kcZG2pNcGlA5M65DUHJYoB6Vl4 


Now login AppCenter by following command enter the Access Key when it ask, given below
appcenter login 
 
3161415e106aaf07bdb1e8e3559a5d74c34e4eca 
 
 
First remove app if installed already in emulator if it is opened and close emulator.
After launching emulator we need to generate the debug/release apk bundled without RN packager, to generate debug apk with assets execute following command:
1) react-native run-android
2) react-native bundle --dev false --platform android --entry-file index.js --bundle-output ./android/app/build/intermediates/assets/debug/index.android.bundle --assets-dest ./android/app/build/intermediates/res/merged/debug
3) cd android
4) ./gradlew assembleDebug
5) cd ..


Now launch emulator by following command, and replace the AVD_NAME with actual:
emulator -avd AVD_NAME

And, now install APK by following command
adb install android/app/build/outputs/apk/debug/app-debug.apk


So far you have generated the app and installed and configured the code push, now make some changes in App.js or any other file of RN that you wish to publish and execute following command to publish to AppCenter

appcenter codepush release-react -a remakrishan.k10/RNMyApp -d Staging

appcenter codepush release-react -a ramakrishna.k181/RNMyApp-1 -d Staging

//This will publish the changes to App Center, note - plz make sure the username is correct and then App Name configured in App Center followed by /



e3nr4dcz7yU7G3t5gh-Ez0eeneZfSkxxe7IgV.   Android



 https://github.com/lisong/code-push-server

https://sharefunyeh.gitbooks.io/webdev/content/articles/build-code-push-server.html





/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React, {Component} from 'react';
import {Platform, StyleSheet, Text, View, TouchableOpacity} from 'react-native';
import codePush from "react-native-code-push";

const instructions = Platform.select({
  ios: 'Press Cmd+R to reload,\n' + 'Cmd+D or shake for dev menu',
  android:
    'Double tap R on your keyboard to reload,\n' +
    'Shake or press menu button for dev menu',
});

type Props = {};

let codePushoptions = {checkFrequency: codePush.CheckFrequency.MANUAL};

class App extends Component<Props> {

  onButtonPress() {
    codePush.sync({
        updateDialog: true,
        installMode: codePush.InstallMode.IMMEDIATE
    });
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>Welcome to Demo code! Team-Fiserv we rocks</Text>
        <Text style={styles.instructions}>To get started, edit App.js</Text>
        <Text style={styles.instructions}>{instructions}</Text>
        <TouchableOpacity onPress={this.onButtonPress}>
             <Text>Load Updates</Text>
        </TouchableOpacity>
      </View>
    );
  }
}


App = codePush(codePushoptions)(App);

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});



